package main

import (
	"fmt"
)

// NOD — это функция для нахождения наибольшего общего делителя (НОД)
// Она нужна, чтобы в конце сократить дробь (например, 10/20 => 1/2)
// Если b != 0, то делим a на b и ищем остаток их деления,
// далее заменяем a на b, и заменяем b на остаток
// Когда b станет равен 0, тогда a будет НОД, но до тех пор повторяются все прыдыдущие шаги
func NOD(a, b int) int {
	for b != 0 {
		a, b = b, a%b // классический алгоритм Евклида
	}
	return a
}

// NOK — это функция для нахождения наименьшего общего кратного (НОК)
// Она нужна, чтобы привести две дроби к одному знаменателю
func NOK(a, b int) int {
	return a * b / NOD(a, b)
}

func main() {
	var n int
	fmt.Scan(&n) // считываем количество дробинок

	// num и den — числитель и знаменатель суммарного урона
	// начинаем с 0/1 (то есть нулевой урон)
	num := 0
	den := 1

	// Цикл по всем дробинкам
	for range n {
		var a, b int
		fmt.Scan(&a, &b) // считываем числитель и знаменатель дроби

		// Находим общий знаменатель между текущей дробью и новой
		commonDen := NOK(den, b)

		// Приводим обе дроби к общему знаменателю
		// Суммируем числители
		num = num*(commonDen/den) + a*(commonDen/b)

		// Обновляем знаменатель до общего
		den = commonDen
	}

	// После сложения всех дробей сокращаем результат
	// Например, если получилось 10/20 — сокращаем до 1/2
	d := NOD(num, den)
	num /= d
	den /= d

	// Выводим итоговую несократимую дробь
	fmt.Printf("%d/%d\n", num, den)
}
