package main

import (
	"fmt"
	"strings"
)

func main() {
	var n int
	fmt.Scan(&n)

	triangle := [][]int{}

	// Строим треугольник Паскаля
	for i := 0; i < n; i++ { //Отсчёт идёт от нуля, поэтому у нас 0,1,2 номерные строки
		row := make([]int, i+1) //Тут мы следовательно записываем в слайс значения:
		//Когда i = 0 → make([]int, 1) → row = [0]
		//Когда i = 1 → make([]int, 2) → row = [0, 0]
		//Когда i = 2 → make([]int, 3) → row = [0, 0, 0]
		row[0], row[i] = 1, 1 //Тут мы присваиваем каждому первому и последнему элементу треугольника значение = 1
		//Когда i = 2 → row = [0, 0, 0]
		//После присваивания: row[0], row[2] = 1, 1 → row = [1, 0, 1]
		for j := 1; j < i; j++ { //Считаем внутренние элементы строки, кроме первого и последнего
			row[j] = triangle[i-1][j-1] + triangle[i-1][j]
			//Берем тут i=2, т.к. при 0 и 1 расчёт не произойдет:
			//	row[1] = triangle[2-1][1-1] + triangle[2-1][1] = triangle[1][0] + triangle[1][1] =
			//то есть берем для triangle[1][0] значение со второй строки в треугольнике и самое первое слева,
			//далее берем самое правое значение и складываем. Там в строке 1 1 будет,
			//потом мы ставим двойку в третью строку и получаем 1 2 1

			//Как именно записываем найденные значения:
			// Для i=3: смотрим в for, там от 1 до j<i, то есть от 1 до 2,
			// это как раз наши значения в нашей строке [1 0 0 1], где они считаются 0,1,2,3
			//Код видит, что у нас расчёт идет для этих нулей, их заменять будем,
			//далее код берет и начинает считать j от 1 до 2: сначала j=1, потом
			// при i=3, j<i -> j=2 ->
			// для j=1: row[1] = triangle[3-1][1-1] + triangle[3-1][1] =
			// triangle[2][0] + triangle[2][1] -> это из прошлой строки [1 2 1] первая единица + 2 = 3
			// и для j=2 row[2] = triangle[3-1][2-1] + triangle[3-1][2] =
			// triangle[2][1] + triangle[2][2] -> [1 2 1], берем 2 и последнюю единицу = 3
			//*** У нас здесь j и обозначает строку, а j элемент в этой строке

			//Рассчитаем 3-ю строку (i = 3): предыдущая строка (i-1 = 2) была triangle[2] = [1, 2, 1]
			//Создали новую строку:
			// row := make([]int, 4) → [0, 0, 0, 0]
			// row[0], row[3] = 1, 1 → [1, 0, 0, 1]
			//Теперь считаем:
			// row[1] = triangle[2][0] + triangle[2][1] = 1 + 2 = 3
			// row[2] = triangle[2][1] + triangle[2][2] = 2 + 1 = 3

			//!Короче, мы берем с прошлой строки 2 крайних значения у треугольника (слева и справа)
			//и складываем их, чтобы потом поставить на место, где у нас сейчас стоит ноль:
			// i=0 row = [1]
			// i-1 row = [1, 1]
			// i=2 row = [1, 0, 1] -> берем прошлую крайнюю левую и правую единицы, складываем и ставим посередине
		}
		triangle = append(triangle, row) //Далее полученные значения добавляются в треугольник заместо нулей
	}

	// Вывод треугольника
	for i, row := range triangle {
		// Для отступов перед строкой — уменьшается к низу
		spaces := strings.Repeat(" ", n-i-1)
		if i == n-1 {
			spaces = "" // последняя строка — без отступов
		}
		fmt.Print(spaces)

		// Печатаем числа с одним пробелом между ними (и после чисел в строке тоже,
		// чтобы при добавлении элементов на следующей и их перезаписи сохранялся пробел)
		for j, val := range row {
			if j > 0 {
				fmt.Print(" ")
			}
			fmt.Print(val)
		}
		fmt.Println()
	}
}
